## 结构体、方法和接口

### **defer**：

* `defer` 关键字用于确保函数在返回之前执行一段代码，无论函数是正常返回还是因为panic而退出。`defer` 通常用于释放资源，比如文件关闭、锁释放等。

- `defer` 语句会将函数的执行推迟到包含它的函数即将返回之前，所有的 `defer` 语句按照它们出现的逆序执行。

 ```
 func readFile(filename string) {
     file, err := os.Open(filename)
     if err != nil {
         log.Fatal(err)
     }
     defer file.Close() // 确保文件在函数结束时关闭
 
     // 处理文件...
 }
 ```

### **recover**：

- `recover` 是一个内建函数，用于重新获得对panic引起的控制权，阻止panic继续向上传递。它只有在 `defer` 函数中调用时才有效。
- 如果 `recover` 捕获到panic，它将停止panic，否则程序会异常终止。
- `recover` 可以返回传递给 `panic` 的值，如果没有发生panic，或者 `recover` 没有被调用，那么它返回 `nil`。

```
func mayPanic() {
    defer func() {
        if r := recover(); r != nil {
            fmt.Println("Recovered from panic:", r)
        }
    }()
    panic("a problem")
}

func main() {
    mayPanic() // 这不会终止程序
    fmt.Println("After mayPanic()")
}
在这个例子中，mayPanic 函数中的 panic 被 defer 里的匿名函数捕获，并通过 recover 恢复，因此程序不会崩溃，而是继续执行 main 函数中的后续代码。
```

### 定义结构体的方法

在 Go 语言中，`(stu *Student)` 这部分代码定义了一个方法，它是结构体 `Student` 的一个接收者（receiver）。这意味着 `hello` 方法是 `Student` 类型的实例的一个方法，而 `stu` 是调用这个方法时传递的 `Student` 实例的引用。

具体来说：

- `stu` 是方法的接收者变量名，你可以用任何有效的标识符替换它。
- `*Student` 表示 `stu` 是指向 `Student` 类型的指针。这意味着你可以通过 `stu` 直接修改 `Student` 实例的数据。

这个方法的作用是返回一个格式化的字符串，其中包含传入的 `person` 字符串和 `Student` 实例的 `name` 字段。

这里是一个简单的 `Student` 结构体和使用这个 `hello` 方法的例子：

go

```go
package main

import "fmt"

// Student 结构体定义
type Student struct {
    name string
}

// Student 的方法
func (stu *Student) hello(person string) string {
    return fmt.Sprintf("hello %s, I am %s", person, stu.name)
}

func main() {
    // 创建一个 Student 实例
    student := Student{name: "Alice"}
    // 调用 Student 的 hello 方法
    greeting := student.hello("Bob")
    fmt.Println(greeting) // 输出：hello Bob, I am Alice
}
```

在这个例子中，`hello` 方法被定义为 `Student` 类型的一个方法，它通过接收者 `stu` 访问 `Student` 实例的字段 `name`。当在 `main` 函数中创建了一个 `Student` 实例并调用 `hello` 方法时，`student` 实例被传递给 `hello` 方法，方法内部通过 `stu.name` 访问实例的 `name` 字段。

### 接口(interfaces)

一般而言，接口定义了一组方法的集合，接口不能被实例化(new)，一个类型可以实现多个接口。

举一个简单的例子，定义一个接口 `Person`和对应的方法 `getName()` 和 `getAge()`：

```
type Person interface {
	getName() string
}

type Student struct {
	name string
	age  int
}

func (stu *Student) getName() string {
	return stu.name
}

type Worker struct {
	name   string
	gender string
}

func (w *Worker) getName() string {
	return w.name
}

func main() {
	var p Person = &Student{
		name: "Tom",
		age:  18,
	}

	fmt.Println(p.getName()) // Tom
}
```

- Go 语言中，并不需要显式地声明实现了哪一个接口，只需要直接实现该接口对应的方法即可。
- 实例化 `Student`后，强制类型转换为接口类型 Person。

```
var _ Person = (*Student)(nil)
var _ Person = (*Worker)(nil)
```

- 将空值 nil 转换为 *Student 类型，再转换为 Person 接口，如果转换失败，说明 Student 并没有实现 Person 接口的所有方法。
- Worker 同上。

实例可以强制类型转换为接口，接口也可以强制类型转换为实例。

```
func main() {
	var p Person = &Student{
		name: "Tom",
		age:  18,
	}

	stu := p.(*Student) // 接口转为实例
	fmt.Println(stu.getAge())
}
```

### 空接口

如果定义了一个没有任何方法的空接口，那么这个接口可以表示任意类型。例如

```
func main() {
	m := make(map[string]interface{})
	m["name"] = "Tom"
	m["age"] = 18
	m["scores"] = [3]int{98, 99, 85}
	fmt.Println(m) // map[age:18 name:Tom scores:[98 99 85]]
}
```

## 并发编程(goroutine)

### sync

Go 语言提供了 sync 和 channel 两种方式支持协程(goroutine)的并发。

例如我们希望并发下载 N 个资源，多个并发协程之间不需要通信，那么就可以使用 sync.WaitGroup，等待所有并发协程执行结束。

```
import (
	"fmt"
	"sync"
	"time"
)

var wg sync.WaitGroup

func download(url string) {
	fmt.Println("start to download", url)
	time.Sleep(time.Second) // 模拟耗时操作
	wg.Done()
}

func main() {
	for i := 0; i < 3; i++ {
		wg.Add(1)
		go download("a.com/" + string(i+'0'))
	}
	wg.Wait()
	fmt.Println("Done!")
}
```

- wg.Add(1)：为 wg 添加一个计数，wg.Done()，减去一个计数。
- go download()：启动新的协程并发执行 download 函数。
- wg.Wait()：等待所有的协程执行结束。

### channel

chan就是channel

```
var ch = make(chan string, 10) // 创建大小为 10 的缓冲信道

func download(url string) {
	fmt.Println("start to download", url)
	time.Sleep(time.Second)
	ch <- url // 将 url 发送给信道
}

func main() {
	for i := 0; i < 3; i++ {
		go download("a.com/" + string(i+'0'))
	}
	for i := 0; i < 3; i++ {
		msg := <-ch // 等待信道返回消息。
		fmt.Println("finish", msg)
	}
	fmt.Println("Done!")
}

start to download a.com/2
start to download a.com/0
start to download a.com/1
finish a.com/2
finish a.com/1
finish a.com/0
Done!
```

使用 channel 信道，可以在协程之间传递消息。阻塞等待并发协程返回消息。

信道的输出顺序是不固定的

## 单元测试(unit test)

假设我们希望测试 package main 下 `calc.go` 中的函数，要只需要新建 `calc_test.go` 文件，在`calc_test.go`中新建测试用例即可。

```
// calc.go
package main

func add(num1 int, num2 int) int {
	return num1 + num2
}
// calc_test.go
package main

import "testing"

func TestAdd(t *testing.T) {
	if ans := add(1, 2); ans != 3 {
		t.Error("add(1, 2) should be equal to 3")
	}
}
```

运行 `go test`，将自动运行当前 package 下的所有测试用例，如果需要查看详细的信息，可以添加`-v`参数。

```
$ go test -v
=== RUN   TestAdd
--- PASS: TestAdd (0.00s)
PASS
ok      example 0.040s
```